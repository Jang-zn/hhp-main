spring:
  application:
    name: hhplus
  profiles:
    active: local
  boot:
    admin:
      client:
        url: http://localhost:9090  # Admin 서버 주소
        instance:
          name: HH Plus 이커머스
          service-url: http://localhost:8080  # 현재 서비스 URL
          metadata:
            tags:
              environment: local
              version: ${version:1.0.0}

# SpringDoc/Swagger 설정
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /api-docs
    display-request-duration: true
    display-operation-id: false
    tags-sorter: alpha
    operations-sorter: alpha
  show-actuator: false

# Actuator 설정 (확장된 모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,threaddump,configprops,hikaricp,loggers,httptrace,beans,env
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    hikaricp:
      enabled: true  # HikariCP 연결 풀 메트릭
    loggers:
      enabled: true  # 로깅 레벨 동적 조정
  metrics:
    enable:
      jvm: true
      system: true
      tomcat: true
      hikaricp: true
      jdbc: true  # JDBC 연결 메트릭
      http: true  # HTTP 요청 메트릭
    export:
      simple:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true  # HTTP 요청 히스토그램
        jdbc.connections.idle: true  # JDBC 유휴 연결 히스토그램
      percentiles:
        http.server.requests: 0.5,0.95,0.99  # HTTP 응답시간 백분위수
        jdbc.connections.idle: 0.5,0.95,0.99  # JDBC 연결 백분위수


---
# JPA + MySQL 환경 (성능 테스트용)
spring.config.activate.on-profile: local, dev, prod

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/hhplus?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 50          # 부하테스트용 증가 (기본 10 → 50)
      minimum-idle: 10               # 최소 유지 연결 수 증가
      connection-timeout: 20000      # 연결 타임아웃 감소 (빠른 실패)
      idle-timeout: 300000           # 5분간 유휴 연결 유지
      max-lifetime: 1200000          # 20분간 연결 최대 유지
      validation-timeout: 5000       # 연결 검증 타임아웃
      leak-detection-threshold: 60000 # 1분 이상 연결 누수 감지
  logging:
    level:
      org.hibernate.SQL: DEBUG
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    open-in-view: false  # 트랜잭션 범위 최적화 (OSIV 비활성화)
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect  # 최신 Dialect 사용
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20  # 배치 쿼리 최적화
          batch_versioned_data: true
        order_inserts: true  # INSERT 순서 최적화
        order_updates: true  # UPDATE 순서 최적화
        generate_statistics: true  # 쿼리 통계 수집
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 100  # 100ms 이상 슬로우 쿼리 로깅
  # Retry 설정 (동시성 제어용)
  retry:
    enabled: true
  # Redis 설정 (분산 락)
  data:
    redis:
      host: localhost
      port: 6379
      password: 
      timeout: 2000
  
  # Kafka 설정 (KRaft 모드 - ZooKeeper 불필요)
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: hhplus-server
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "kr.hhplus.be.server.domain.event"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
  
  # Async 스레드풀 설정
  task:
    execution:
      pool:
        core-size: 5          # 기본 스레드 수
        max-size: 20          # 최대 스레드 수
        queue-capacity: 50    # 큐 용량
        keep-alive: 60s       # 유휴 스레드 유지 시간
      thread-name-prefix: "Spring-Async-"
    scheduling:
      pool:
        size: 5               # 스케줄링 스레드풀 크기
      thread-name-prefix: "Spring-Scheduling-"

# Messaging 설정 (STEP 15/16용)
messaging:
  type: redis                    # redis, kafka, inmemory
  redis:
    stream:
      consumer-group: "hhplus-consumers"
      max-pending: 1000
      block-time: 5000          # 5초 블로킹
    pub-sub:
      timeout: 3000             # 3초 타임아웃
  retry:
    max-attempts: 3
    backoff:
      initial: 1000             # 1초
      multiplier: 2.0
      max: 30000               # 30초

---
# TestContainers 환경 (통합 테스트용)
spring.config.activate.on-profile: integration-test

spring:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
  retry:
    enabled: false  # 통합 테스트에서는 재시도 비활성화

---
# 테스트 환경 (Repository 테스트 - TestContainers 사용)
spring.config.activate.on-profile: test

spring:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  retry:
    enabled: false  # 테스트에서는 재시도 비활성화

---
# 단위 테스트 환경 (Controller, Service 등 - JPA 비활성화)
spring.config.activate.on-profile: unit

spring:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration
      - org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration
      - org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration
  jpa:
    hibernate:
      ddl-auto: none
  datasource:
    enabled: false
  retry:
    enabled: false

---
# Repository 단위 테스트 환경 (TestContainers 사용)
spring.config.activate.on-profile: unit-repository

spring:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  retry:
    enabled: false  # 테스트에서는 재시도 비활성화

---
# 통합 테스트 환경 (TestContainers 사용)
spring.config.activate.on-profile: integration

spring:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
  retry:
    enabled: false  # 통합 테스트에서는 재시도 비활성화

# Messaging 설정 - 통합 테스트에서는 실제 EventPort + Consumer 파이프라인 사용
messaging:
  type: redis

